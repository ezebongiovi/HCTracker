jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("build/jacocoTestReport")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

// Our merge report task

task jacocoTestReport(type: JacocoReport, dependsOn: ['app:testDebugUnitTest', 'domain:testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def mainSrc = [
            "app/src/main/kotlin",
            "domain/src/main/kotlin"
    ]

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([
            fileTree(dir: "app/build/tmp/kotlin-classes/debug", excludes: fileFilter),
            fileTree(dir: "domain/build/tmp/kotlin-classes/debug", excludes: fileFilter)
    ])
    executionData.from = fileTree(dir: '/', includes: [
                    '**/*.ec', '**/*.exec'
            ])


    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/App*.class'
            ])
        }))
    }
}